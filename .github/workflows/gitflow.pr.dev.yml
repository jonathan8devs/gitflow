# Author: Jonathan Starck (jonathan.starck@aiddevs.com)
# gitflow.pr.dev.yml (c) 2024
# Desc: description
# Created:  2024-02-18T13:29:06.989Z
# Modified: 2024-02-18T14:02:48.491Z

on:
  pull_request:
    branches:
      - dev
name: "Gitflow: on - pull_request - branches - dev"
jobs:
  #SECTION - Analyze Situation
  analyze_situation:
    name: "Analysiere Situation"
    runs-on: ubuntu-latest
    steps:
      #NOTE - If the variable `DEBUG_CONTEXT` is set to `true`, the GitHub context variables are output as JSON.
      - name: Debug of GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_REF: ${{ github.ref }}       
          GITHUB_REF_NAME: ${{ github.ref_name }} # Name of the current branch or tag
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }} # Name of the base branch for pull requests
          GITHUB_EVENT_NAME: ${{ github.event_name }} # Type of the triggering event (e.g. push, pull_request)
          GITHUB_EVENT_BASE_REF: ${{ github.event.base_ref }}
          GITHUB_EVENT_COMPARE: ${{ github.event.compare }}
          GITHUB_EVENT_CREATED: ${{ github.event.created }}
          GITHUB_EVENT_DELETED: ${{ github.event.created }}
          GITHUB_EVENT_FORCED: ${{ github.event.forced }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_EVENT_REF: ${{ github.event.ref }}
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_EVENT_BASE_REF: $GITHUB_EVENT_BASE_REF"
          echo "GITHUB_EVENT_COMPARE: $GITHUB_EVENT_COMPARE"
          echo "GITHUB_EVENT_CREATED: $GITHUB_EVENT_CREATED"
          echo "GITHUB_EVENT_DELETED: $GITHUB_EVENT_DELETED"
          echo "GITHUB_EVENT_FORCED: $GITHUB_EVENT_FORCED"
          echo "GITHUB_EVENT_ACTION: $GITHUB_EVENT_ACTION"
          echo "GITHUB_EVENT_REF: $GITHUB_EVENT_REF"
          echo "GITHUB_CONTEXT: $GITHUB_CONTEXT"
  #!SECTION
  situation_switch:
    name: "Switch"
    runs-on: ubuntu-latest
    steps:
      - name: "Script"
        env:
          GITHUB_REF: ${{ github.ref }}       
          GITHUB_REF_NAME: ${{ github.ref_name }} 
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_BASE_REF: ${{ github.event.base_ref }}
          GITHUB_EVENT_CREATED: ${{ github.event.created }}
          GITHUB_EVENT_DELETED: ${{ github.event.created }}
          GITHUB_EVENT_FORCED: ${{ github.event.forced }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          GITHUB_EVENT_REF: ${{ github.event.ref }} 
        run: |
          CHECK_FOR_UPDATE=false
          BUILD=false
          
          # Prüfen, ob der Branch-Name mit "feature/" beginnt
          if [[ $GITHUB_HEAD_REF =~ ^[Ff][eE][aA][tT][uU][rR][eE]/(.+) ]]; then
            # Branch-Name extrahieren
            feature_name="${BASH_REMATCH[1]}"
            # Prüfen, ob das Event ein Pull Request ist
            if [[ $GITHUB_EVENT_NAME == "pull_request" ]]; then
              # Aktion des Pull Requests ermitteln
              action=$GITHUB_EVENT_ACTION
              # Bei "opened", "synchronize" oder "reopened" den Pull Request bearbeiten
              if [[ $action == "opened" || $action == "synchronize" || $action == "reopened" ]]; then
                # Hier den Code einfügen, der bei einem neuen, synchronisierten oder wiedergeöffneten Pull Request ausgeführt werden soll.
                CHECK_FOR_UPDATE=true
                BUILD=true
              fi
            fi
          fi



        	